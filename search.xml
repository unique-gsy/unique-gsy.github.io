<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>OS</title>
    <url>/2021/02/17/OS/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>堆和队列</title>
    <url>/2021/01/20/QueueAndStack/</url>
    <content><![CDATA[<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p>堆通常是可以看作一个完全二叉树<br>它必须满足以下两个性质：        </p>
<ul>
<li><p>堆中的某个节点不可大于或小于其父节点的值      </p>
</li>
<li><p>堆总是一棵完全二叉树</p>
<p><img src="./QueueAndStack/%E5%A0%86.png" alt="堆"></p>
<p>可以看出堆中任意一个节点i，他的左子节点位于(2i)位置上，右子节点位于(2i+1)位置上，<br>其父节点位于(i÷2)位置上</p>
</li>
</ul>
<p>也可以使用数组数组储存二叉堆</p>
<p><img src="./QueueAndStack/%E6%95%B0%E7%BB%84%E5%82%A8%E5%AD%98%E4%BA%8C%E5%8F%89%E5%A0%86.png" alt="数组储存二叉堆"></p>
<h2 id="堆的基本操作"><a href="#堆的基本操作" class="headerlink" title="堆的基本操作"></a>堆的基本操作</h2><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><ul>
<li>在堆的最后空闲位置插入元素        </li>
<li>如果不破坏堆的性质，那么插入完成。<br>否则采取“上滤”策略，移动到正确位置。<br>（“上滤”：先在堆的尾部插入，然后向上移动到正确位置，每次移动使双方交换位置）</li>
</ul>
<a id="more"></a>

<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>hash_table</title>
    <url>/2021/01/18/hash-table/</url>
    <content><![CDATA[<h1 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h1><p>散列表的核心思想是“以空间换时间”，重点解决冲突问题。</p>
<h2 id="一、散列函数"><a href="#一、散列函数" class="headerlink" title="一、散列函数"></a>一、散列函数</h2><p>key值通过散列函数得到的hash(key)值表示内存中的具体地址      </p>
<h2 id="二、哈希冲突"><a href="#二、哈希冲突" class="headerlink" title="二、哈希冲突"></a>二、哈希冲突</h2><p>希望的理想情况是key1≠key2，则hash(hey1)≠hash(key2)。<br>但现实情况不可能没有冲突，所以哈希表的核心问题之一就是解决冲突。<br>介绍两种解决hash冲突方法</p>
<a id="more"></a>

<h3 id="1、开放寻址法"><a href="#1、开放寻址法" class="headerlink" title="1、开放寻址法"></a>1、开放寻址法</h3><p>开放寻址法中比较经典的有：线性探测法、平方探测法、双散列和再散列。      </p>
<ol>
<li><p> 线性探测法<br>核心思想是在发生冲突后从hash(key)位置往后查找，直到有空闲位置。<br>缺点是当插入元素足够大后，发生冲突的可能性越来越大，极端情况下的时间复杂度是O(N)</p>
</li>
<li><p> 平方探测法<br>核心思想是在发生冲突后从hash(key)位置向后(或向前)探测的步长为“i²”，<br>即，第一次探测的位置是hash(key)+1²（或hash(key)-1²）<br>第二次探测的位置是hash(key)+2²（或hash(key)-2²） </p>
</li>
<li><p> 双散列<br>核心思想是用一组散列函数，当第一个散列函数发生冲突后，改用第二个散列函数检测是否发生冲突。<br>（一种流行思想是F(i) = i * hash (key)）<br>以此类推，直到找到空闲位置。</p>
</li>
</ol>
<h3 id="2、链表法"><a href="#2、链表法" class="headerlink" title="2、链表法"></a>2、链表法</h3><p>链表法易于实现，但是会占用额外空间。<br>总结说就是散列结构表，每个表结构中有一个指针，用于链表向下索引。<br>在发生冲突后，将元素存在冲突链表中。每次寻找元素时也需要对比链表元素确定结果。<br>（补代码）</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>散列表</tag>
      </tags>
  </entry>
  <entry>
    <title>hello_myBlog</title>
    <url>/2021/01/07/hello-myBlog/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>sort</title>
    <url>/2021/01/29/sort/</url>
    <content><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h3 id="（重点还需要补充时间复杂度的分析）"><a href="#（重点还需要补充时间复杂度的分析）" class="headerlink" title="（重点还需要补充时间复杂度的分析）"></a>（重点还需要补充时间复杂度的分析）</h3><a id="more"></a>

<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>本质是保证前i个元素有序<br><img src="https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif" alt="插入排序"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span> arry[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> key = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    key = arry[i];</span><br><span class="line">    <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; j &gt;= <span class="number">0</span> &amp;&amp; arry[j] &gt; key; --j) &#123;</span><br><span class="line">      arry[j+<span class="number">1</span>] = arry[j];</span><br><span class="line">    &#125;</span><br><span class="line">    arry[j+<span class="number">1</span>] = key;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以简单看出，插入排序的时间复杂度为O(n²)</p>
<h2 id="希尔排序-（缩小增量排序）"><a href="#希尔排序-（缩小增量排序）" class="headerlink" title="希尔排序 （缩小增量排序）"></a>希尔排序 （缩小增量排序）</h2><p>本质是对不同增量的序列组进行排序。<br>希尔排序存在多个个增量序列，排序时使用其中一个增量序列，所以存在某种增量序列为最优情况。<br>一种常用排序，但不一定是最好的增量序列是(N,N/2….)</p>
<p><img src="https://upload-images.jianshu.io/upload_images/6095354-ff984d80dbc0455f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/670/format/webp" alt="希尔排序"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> gap, i, j;</span><br><span class="line">  <span class="keyword">int</span> temp;</span><br><span class="line">  <span class="keyword">for</span> (gap = len &gt;&gt; <span class="number">1</span>; gap &gt; <span class="number">0</span>; gap &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = gap; i &lt; len; i++) &#123;</span><br><span class="line">      temp = arr[i];</span><br><span class="line">      <span class="keyword">for</span> (j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap)</span><br><span class="line">        arr[j + gap] = arr[j];</span><br><span class="line">        arr[j + gap] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>希尔排序严重依赖增量序列的选择，最坏情况可能是O(n²)</p>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>可以得到目前最佳的O(NlogN)的时间复杂度，但在实践中慢于使用Sedgewick增量序列的希尔排序<br>本质是</p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序是分治算法的一个典型应用。<br>本质是对问题拆解后，再排序合并。（如下图）<br><img src="https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161218163120151-452283750.png" alt="归并图解"><br><img src="https://www.runoob.com/wp-content/uploads/2019/03/mergeSort.gif" alt="归并动图"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">define MIN(x,y) x &lt; y ? x : y </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *a = arr;</span><br><span class="line">  <span class="keyword">int</span> *b = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">  <span class="keyword">int</span> seg, start;</span><br><span class="line">  <span class="keyword">for</span> (seg = <span class="number">1</span>; seg &lt; len; seg += seg) &#123;</span><br><span class="line">    <span class="keyword">for</span> (start = <span class="number">0</span>; start &lt; len; start += seg * <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> low = start, mid = min(start + seg, len), high = min(start + seg * <span class="number">2</span>, len);</span><br><span class="line">      <span class="keyword">int</span> k = low;</span><br><span class="line">      <span class="keyword">int</span> start1 = low, end1 = mid;</span><br><span class="line">      <span class="keyword">int</span> start2 = mid, end2 = high;</span><br><span class="line">      <span class="keyword">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</span><br><span class="line">        b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</span><br><span class="line">      <span class="keyword">while</span> (start1 &lt; end1)</span><br><span class="line">        b[k++] = a[start1++];</span><br><span class="line">      <span class="keyword">while</span> (start2 &lt; end2)</span><br><span class="line">        b[k++] = a[start2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> *temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (a != arr) &#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">      b[i] = a[i];</span><br><span class="line">    b = a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快排也是分治思想的一个经典应用。最坏情况需要O(n²)，平均上需要O(nlogn)<br>本质是每次选择一个基元素，将该元素放置在正确位置（大的放右边，小的放在左边）。<br>对所有元素递归进行。</p>
<p><img src="https://wiki.jikexueyuan.com/project/easy-learn-algorithm/images/3.9.png" alt="快速排序"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Range</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> start, end;</span><br><span class="line">&#125; Range;</span><br><span class="line"></span><br><span class="line"><span class="function">Range <span class="title">new_Range</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    Range r;</span><br><span class="line">    r.start = s;</span><br><span class="line">    r.end = e;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">const</span> <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    Range r[len];</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    r[p++] = new_Range(<span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        Range range = r[--p];</span><br><span class="line">        <span class="keyword">if</span> (range.start &gt;= range.end)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = arr[(range.start + range.end) / <span class="number">2</span>]; <span class="comment">// 选取基准点</span></span><br><span class="line">        <span class="keyword">int</span> left = range.start, right = range.end;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[left] &lt; mid) ++left;   <span class="comment">// 判断基准点左侧是否符合要求</span></span><br><span class="line">            <span class="keyword">while</span> (arr[right] &gt; mid) --right; <span class="comment">// 判断基准点右侧是否符合要求</span></span><br><span class="line">            <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">                swap(&amp;arr[left], &amp;arr[right]);</span><br><span class="line">                left++;</span><br><span class="line">                right--;               <span class="comment">// 移动指针</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (left &lt;= right);</span><br><span class="line">        <span class="keyword">if</span> (range.start &lt; right) r[p++] = new_Range(range.start, right);</span><br><span class="line">        <span class="keyword">if</span> (range.end &gt; left) r[p++] = new_Range(left, range.end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>桶排序适用的原则是所有元素可以均匀覆盖在一个有界范围内。<br>核心思想是将元素放入对应的桶内，并在插入的同时按插入排序顺序插入（可以选择更好的排序方法）<br><img src="https://www.runoob.com/wp-content/uploads/2019/03/Bucket_sort_2.svg_.png" alt="桶排序"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>第一次将元素插入对应桶内的时间复杂度为O(N),<br>每个元素插入排序的平均时间复杂度为O(NlogN)</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>树</title>
    <url>/2021/01/15/tree/</url>
    <content><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>树的一些特殊结构可以保证大部分操作在O（logN）完成，保证了最坏情况的时间界</p>
<hr>
<ul>
<li><h2 id="树的遍历（以二叉树为样例）"><a href="#树的遍历（以二叉树为样例）" class="headerlink" title="树的遍历（以二叉树为样例）"></a><strong>树的遍历（以二叉树为样例）</strong></h2></li>
</ul>
<table>
<thead>
<tr>
<th>遍历方式</th>
<th>遍历顺序</th>
</tr>
</thead>
<tbody><tr>
<td>前序遍历</td>
<td>根节点——&gt;右节点——&gt;左节点（中、右、左）</td>
</tr>
<tr>
<td>中序遍历</td>
<td>左节点——&gt;根节点——&gt;右节点（左、中、右）</td>
</tr>
<tr>
<td>后序遍历</td>
<td>左节点——&gt;右节点——&gt;根节点（左、右、中）</td>
</tr>
</tbody></table>
<h3 id="1、后缀表达式转化为表达式树"><a href="#1、后缀表达式转化为表达式树" class="headerlink" title="1、后缀表达式转化为表达式树"></a>1、后缀表达式转化为表达式树</h3><p>通过入栈出栈生成表达式树。<br> 具体步骤是：<br> 1、如果该元素是数字，压入栈<br> 2、如果该元素是运算符，弹出两个元素，第一个为右子树，第二个为左子树，生成新树压入栈<br> 3、如果栈中只剩一个元素时，即为表达树  </p>
<a id="more"></a>

<p>例如：后缀表达式为1 2 3 + 4 * + 5 -<br>扫描123<br><img src="./tree/1.png" width="50%" height="50%"><br>扫描+<br><img src="./tree/2.png" width="50%" height="50%"><br>扫描4和*<br><img src="./tree/3.png" width="50%" height="50%"><br>扫描+和5<br><img src="./tree/4.png" width="50%" height="50%"><br>扫描-<br><img src="./tree/5.png" width="50%" height="50%">       </p>
<ul>
<li><h2 id="二叉查找树（BST）"><a href="#二叉查找树（BST）" class="headerlink" title="二叉查找树（BST）"></a><strong>二叉查找树（BST）</strong></h2></li>
</ul>
<p>一种特殊排序树，要求左节点小于根节点，右节点大于根节点。</p>
<p>理想二叉查找树的插入、删除、查找的时间复杂度都是O(logN)。</p>
<p><img src="./tree/AVL.png" alt="理想二叉查找树"></p>
<p>但是可能出现极端情况，导致时间复杂度变成(N)。</p>
<p>![极端二叉查找树]<img src="./tree/6.png" width="15%" height="20%">      </p>
<h3 id="1、insert"><a href="#1、insert" class="headerlink" title="1、insert"></a>1、insert</h3><p>第一种情况，插入新节点，找到正确位置，malloc空间即可。<br>第二种情况，插入重复节点，最好是在节点记录中增加信息域表示重复次数。（避免程序开销）</p>
<h3 id="2、delete"><a href="#2、delete" class="headerlink" title="2、delete"></a>2、delete</h3><p>删除节点有三种情况：<br>1、如果节点是树叶，直接删除即可，调整父节点指针指向NULL<br>2、如果是有一个子叶的节点，那么将父节点的指针绕过本节点指向子节点，然后free节点空间<br>3、如果有两个子叶的节点，一般的策略是将右节点的最小数据节点代替要删除节点<br>（因为最小数据节点不会有左节点，第二次删除会简单一些）<br>    然后free两个节点空间   </p>
<p>如果删除次数不太多，可以选择“懒惰删除”，在节点处作标记即可（避免程序开销）</p>
<h3 id="3、多次填删后的平衡分析"><a href="#3、多次填删后的平衡分析" class="headerlink" title="3、多次填删后的平衡分析"></a>3、多次填删后的平衡分析</h3><p>二叉树会很不平衡（补图）</p>
<ul>
<li><h2 id="平衡二叉树（AVL）"><a href="#平衡二叉树（AVL）" class="headerlink" title="平衡二叉树（AVL）"></a><strong>平衡二叉树（AVL）</strong></h2></li>
</ul>
<p>要求二叉树有序（左节点小于根节点小于右节点），且有平衡条件，即左右子树的深度差不大于1，<br>但是多次进行填删后会破坏平衡条件，需要进行旋转，调节平衡状态<br>1、当外侧深度大时，需要进行单旋转<br>2、当内测深度大时，需要进行双旋转  </p>
<img src="./tree/AVL旋转树.jpg" width="70%" height="50%">    

<p>（补代码）</p>
<ul>
<li><h2 id="伸展树"><a href="#伸展树" class="headerlink" title="伸展树"></a><strong>伸展树</strong></h2></li>
</ul>
<p>保证每次对树的操作最多进行O(MlogN)，但不保证是平衡树。<br>他的伸展操作和AVL树的平衡操作类似  </p>
<ul>
<li><h2 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a><strong>B-树</strong></h2></li>
</ul>
<p>是一种多路平衡查找树。<br>通常描述B-树时指定阶数，他的阶数表示最多拥有的节点数（阶数≥2）。<br>（当介树为2时，就是二叉搜索树）</p>
<p>B树需要满足以下要求：<br>1、所有节点按递增排序，左小右大。<br>2、非叶节点子节点数＞1且≤阶数。<br>3、所有叶子节点都在一层。<br>4、关键字数：枝节点的关键字数量大于等于ceil(m/2)-1个且小于等于M-1个<br>（注：ceil()是个朝正无穷方向取整的函数 如ceil(1.1)结果为2)<br>（_这里还有疑惑_）</p>
<ul>
<li><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a><strong>红黑树</strong></h2></li>
</ul>
<p>红黑树也是二叉平衡树，在插入和删除的时候自动平衡。<br>其次，红黑树必须满足以下性质：<br>1、每个节点要么是黑色，要么是红色。<br>2、根节点必须是黑色的。<br>3、每个叶子节点必须是黑色的。<br>4、每个红色节点的两个子节点一定是黑色的。<br>5、任意节点的每个叶子路径都包含相同数量的黑节点</p>
<p>重点掌握红黑树填删后的颜色选择和自平衡过程（后续补充）</p>
]]></content>
      <tags>
        <tag>二叉树、AVL树、伸展树</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2021/02/03/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>图论</title>
    <url>/2021/01/30/%E5%9B%BE%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><p>图可以分为（有向图，无向图），（有权图，无权图），（连通图，非连通图）。<br>图顶点度的概念：</p>
<ul>
<li>度：与该点连接的所有节点总和    </li>
<li>入度：存在于有向图中，所有接入该点的边数总和。</li>
<li>出度：存在于有向图中，所有接出该点的边数总和。</li>
</ul>
<p>图的表示方法：</p>
<ul>
<li>邻接矩阵：即二维数组，相通即为1（或者是对应权值）。不通则为0。<br>  代价是空间消耗过大，若图是稠密的，邻接矩阵则较为合适。</li>
<li>邻接链表：使用一个表存放所有相邻顶点。</li>
</ul>
<a id="more"></a>

<p><img src="https://pic1.zhimg.com/80/v2-97b58740d45f3041736d45faacbbfb94_720w.png" alt="表示方法"></p>
<h2 id="一、拓扑排序"><a href="#一、拓扑排序" class="headerlink" title="一、拓扑排序"></a>一、拓扑排序</h2><p>拓扑排序是对有向无环图的顶点的一种排序，它使得如果存在一条Vi到Vj的路径，那么排序中Vj出现在Vi的后面。<br>一种常用方法是：</p>
<ul>
<li>在图中选择一个入度为0的顶点，并输出储存。</li>
<li>在图中删除该点和以该点为起点的有向边。</li>
<li>重复以上操作，直到当前图中无顶点或不存在无前驱顶点（此情况图中比存在环路）。</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/8468731-da38fa971e5d52b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/544/format/webp" alt="拓扑排序"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Topsort</span><span class="params">(Graph G)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> Counter;</span><br><span class="line">  Vertex V,W;</span><br><span class="line">  <span class="keyword">for</span> (Counter = <span class="number">0</span>; Counter &lt; NumVertex; Counter++) &#123;</span><br><span class="line">    V = FindNewVertexOfIndegreeZero();</span><br><span class="line">    <span class="keyword">if</span> (V == NotAVertex) &#123;</span><br><span class="line">      Error(<span class="string">&quot;Graph has a cycle&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TopNum[V] = Counter;</span><br><span class="line">    <span class="keyword">for</span> each W adjacent to V</span><br><span class="line">      Indegree[W]--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、图的遍历（最短路径算法）"><a href="#二、图的遍历（最短路径算法）" class="headerlink" title="二、图的遍历（最短路径算法）"></a>二、图的遍历（最短路径算法）</h2><p>这就是常见的单源最短路径问题。<br>在有权图中，路径长度是路径权值相加。无权图中是路径边数。<br>（当权值中出现负数时，最短路径问题时不确定的（因为可以不断走负值路径使长度为负无穷）。）<br>（无权图中可以假设所有边权值为1）</p>
<h3 id="1、广度优先算法BFS"><a href="#1、广度优先算法BFS" class="headerlink" title="1、广度优先算法BFS"></a>1、广度优先算法BFS</h3><p>核心思想是依次搜索每个节点的所有相邻节点，保证每次节点的下节点为最短距离的节点。    </p>
<p>算法步骤：</p>
<ul>
<li>首先将根节点放入队列中</li>
<li>在队列中取出第一个节点，如果该节点是最终结果，那么停止搜寻返回结果。<br>如果不是，则将该节点中所有未检验过的节点放入队列中。</li>
<li>若队列为空，表示图中所有节点都搜索过，返回结果为“未找到”</li>
<li>重复步骤2</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/3661808-7f5c9490d17f2177.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/285/format/webp" alt="BFS"><br>如上图，若以广度优先搜索数字8，则结果为：<br>1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h4><p>采用广度优先算法思想，是目前已知的最快的单源最短路径算法。</p>
<p>算法步骤是：</p>
<ul>
<li>初始两个队列S和T，S是图中给定顶点{v₀}，T是其他节点。</li>
<li>在T中选择一个S中最后顶点最近的节点，加入S中。</li>
<li>重复第二步，直到找到目标顶点。</li>
</ul>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/08/10dalunce-7235.gif" alt="动图演示"></p>
<p>（补代码）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="2、深度优先算法DFS"><a href="#2、深度优先算法DFS" class="headerlink" title="2、深度优先算法DFS"></a>2、深度优先算法DFS</h3><p>类似与树的先序遍历。<br>核心思想是从顶点出发，沿一条道路走到底，否则返回底部的上一个节点后走另一条路，直到找到目标节点。<br>（图里有一个问题是可能会出现环路，所以需要设置一个数组标记此节点是否访问过）<br>由此可以看出，用递归的方法是最易于实现的。</p>
<p><img src="https://image-static.segmentfault.com/206/966/2069666426-59be3312d9e8f_articlex" alt="DFS">    </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">### <span class="number">3</span>、最小生成树算法</span><br><span class="line"></span><br><span class="line">生成树是指他的节点为图中所有N个节点，边只有是图中的N+<span class="number">1</span>条边。    </span><br><span class="line">最小生成树还要求边中代价和最小。    </span><br><span class="line">![最小生成树](https:<span class="comment">//img-blog.csdn.net/20160714130435508)</span></span><br><span class="line"></span><br><span class="line">#### <span class="number">1</span>）Prim算法</span><br><span class="line"></span><br><span class="line">也可以理解为“加点法”，每次迭代选择和当前节点相连节点中代价最小边的点，直到完成最小生成树。    </span><br><span class="line">![Prim](https:<span class="comment">//img-blog.csdn.net/20160714161107576)</span></span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="2）kruskal算法"><a href="#2）kruskal算法" class="headerlink" title="2）kruskal算法"></a>2）kruskal算法</h4><p>可以理解成“加边法”，迭代选择图中代价最小的边（不必要求点必须相连），直到完成所有节点<br><img src="https://img-blog.csdn.net/20160714144315409" alt="Kruskal"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4、NP完全问题"><a href="#4、NP完全问题" class="headerlink" title="4、NP完全问题"></a>4、NP完全问题</h3>]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>贪心算法</title>
    <url>/2021/02/03/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
</search>
